import asyncio
import json
import logging
import os
import random
import sqlite3
from datetime import datetime, timedelta
from typing import Any, Awaitable, Callable, Dict

import matplotlib

matplotlib.use('Agg')
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, TelegramObject

TOKEN = ""
DOCS_URL = "https://telegra.ph/WombatCombat---help-06-28"

DB_FILE = "wombat.db"
CHART_FILE = "chart.png"
GROW_COOLDOWN_HOURS = 24
TAG_COOLDOWN_SECONDS = 10
EVENT_CHANCE = 20
SPAM_COOLDOWN_SECONDS = 2
DUEL_ACCEPT_TIMEOUT_SECONDS = 60
PRESTIGE_REQUIREMENT = 100 

HUMILIATION_PHRASES = [
    "–ú–æ–ª—á–∞—Ç—å, –ø—Ä–∏–≥–æ–≤–æ—Ä–µ–Ω–Ω—ã–π!", "–û—Å—É–∂–¥–µ–Ω–Ω—ã–π –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≥–æ–ª–æ—Å–∞.", "–°–ª–æ–≤–æ —Ç–µ–±–µ –Ω–µ –¥–∞–≤–∞–ª–∏, —á–µ—Ä–≤—å.",
    "–¢–≤–æ–µ –º–µ—Å—Ç–æ —É –ø–∞—Ä–∞—à–∏, –∞ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö.", "–ü–µ—Ç—É—à–æ–∫, –Ω–µ —á–∏—Ä–∏–∫–∞–π!",
    "–¢–∏—à–µ –±—É–¥—å, –∞ —Ç–æ –≤–∏–ª–∫–æ–π –≤ –≥–ª–∞–∑ –∫–æ–ª—å–Ω—É.", "–¢–≤–æ–π –∂–∞–ª–∫–∏–π –ª–µ–ø–µ—Ç –∑–¥–µ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
]

dp = Dispatcher()
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
user_last_message_time = {}


# --- Database Functions ---
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER, chat_id INTEGER, first_name TEXT, username TEXT,
                    size INTEGER DEFAULT 0, nickname TEXT, last_growth TEXT, status TEXT DEFAULT 'normal',
                    condemned_by INTEGER, punishment_end_time TEXT, executed_at TEXT,
                    size_before_execution INTEGER DEFAULT 0, medals INTEGER DEFAULT 0,
                    PRIMARY KEY (user_id, chat_id)
                )
            ''')
        try:
            # Backwards compatibility check for 'medals' column
            cursor.execute("SELECT medals FROM users LIMIT 1")
        except sqlite3.OperationalError:
            cursor.execute("ALTER TABLE users ADD COLUMN medals INTEGER DEFAULT 0")
            logging.info("Column 'medals' added to 'users' table.")

        cursor.execute('''
                CREATE TABLE IF NOT EXISTS chats (
                    chat_id INTEGER PRIMARY KEY, last_event TEXT, last_tag_time TEXT,
                    active_duel_json TEXT, active_trial_json TEXT
                )
            ''')
        conn.commit()


def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d


def db_query(query, params=(), fetchone=False, fetchall=False, commit=True):
    with sqlite3.connect(DB_FILE) as conn:
        conn.row_factory = dict_factory
        cursor = conn.cursor()
        cursor.execute(query, params)
        result = None
        if fetchone:
            result = cursor.fetchone()
        if fetchall:
            result = cursor.fetchall()
        if commit:
            conn.commit()
    return result


# A simple middleware to prevent command spamming from a single user.
@dp.message.middleware()
async def anti_spam_middleware(
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.Message,
        data: Dict[str, Any]
) -> Any:
    user_id = event.from_user.id
    current_time = datetime.now()
    if user_id in user_last_message_time:
        time_diff = current_time - user_last_message_time[user_id]
        if time_diff < timedelta(seconds=SPAM_COOLDOWN_SECONDS):
            return
    user_last_message_time[user_id] = current_time
    return await handler(event, data)


# Helper to get target user ID from a reply or a @username mention.
async def get_target_id_from_message(message: types.Message, chat_id: int) -> str | None:
    if message.reply_to_message and not message.reply_to_message.from_user.is_bot:
        return str(message.reply_to_message.from_user.id)
    if message.entities:
        for entity in message.entities:
            if entity.type in ['mention', 'text_mention']:
                if entity.type == 'text_mention' and entity.user:
                    return str(entity.user.id)
                elif entity.type == 'mention':
                    mentioned_username = message.text[entity.offset + 1:entity.offset + entity.length].lower()
                    user = db_query("SELECT user_id FROM users WHERE LOWER(username) = ? AND chat_id = ?",
                                    (mentioned_username, chat_id), fetchone=True)
                    if user:
                        return str(user['user_id'])
    return None


@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    chat_id, user_id = message.chat.id, message.from_user.id
    first_name, username = message.from_user.first_name, message.from_user.username
    user = db_query("SELECT 1 FROM users WHERE user_id = ? AND chat_id = ?", (user_id, chat_id), fetchone=True)
    if not user:
        initial_growth = random.randint(1, 10)
        db_query(
            "INSERT INTO users (chat_id, user_id, first_name, username, size, last_growth, status, medals) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (chat_id, user_id, first_name, username, initial_growth, datetime.now().isoformat(), 'normal', 0)
        )
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n–ó–¥–∞—Ä–æ–≤–∞! –¢–≤–æ–π –≤–æ–º–±–∞—Ç —Å—Ä–∞–∑—É –≤—ã—Ä–æ—Å –Ω–∞ {initial_growth} —Å–º!\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {initial_growth} —Å–º.</b>\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
        )
    else:
        db_query("UPDATE users SET first_name = ?, username = ? WHERE user_id = ? AND chat_id = ?",
                 (first_name, username, user_id, chat_id))
        await message.answer(f"{first_name}, —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ! üòâ")


@dp.message(Command("help"))
async def command_help_handler(message: types.Message):
    text = "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –±–æ—Ç—É –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\nFull documentation for the bot is available at the link below."
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìú –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è / Documentation", url=DOCS_URL)]])
    await message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)


async def handle_humiliation(message: types.Message, user_data: dict):
    if user_data and user_data.get("status") == "condemned":
        await message.reply(random.choice(HUMILIATION_PHRASES))
        return True
    return False


@dp.message(Command("grow"))
async def command_grow_handler(message: types.Message):
    chat_id, user_id = message.chat.id, message.from_user.id
    user_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (user_id, chat_id), fetchone=True)
    if not user_data: await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"); return
    if await handle_humiliation(message, user_data): return
    last_growth_str = user_data.get("last_growth")
    if last_growth_str:
        last_growth_time = datetime.fromisoformat(last_growth_str)
        cooldown = timedelta(hours=GROW_COOLDOWN_HOURS)
        if datetime.now() < last_growth_time + cooldown:
            time_left = (last_growth_time + cooldown) - datetime.now()
            h, rem = divmod(int(time_left.total_seconds()), 3600);
            m, _ = divmod(rem, 60)
            await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π —Ä–æ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {h} —á. {m} –º–∏–Ω.")
            return

    medals = user_data.get("medals", 0)
    if random.randint(1, 100) <= 5:
        growth = 0
    else:
        if medals > 0:
            bonus = medals - 1
            growth = random.randint(5 + bonus, 20 + bonus)
        else:
            growth = random.randint(1, 10)

    if growth == 0:
        db_query("UPDATE users SET last_growth = ? WHERE user_id = ? AND chat_id = ?",
                 (datetime.now().isoformat(), user_id, chat_id))
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π –≤–æ–º–±–∞—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!")
    else:
        new_size = user_data.get("size", 0) + growth
        db_query("UPDATE users SET size = ?, last_growth = ? WHERE user_id = ? AND chat_id = ?",
                 (new_size, datetime.now().isoformat(), user_id, chat_id))
        await message.answer(f"–¢–≤–æ–π –≤–æ–º–±–∞—Ç –≤—ã—Ä–æ—Å –Ω–∞ +{growth} —Å–º! üìè\n–¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞: {new_size} —Å–º.")


@dp.message(Command("prestige"))
async def command_prestige_handler(message: types.Message):
    chat_id, user_id = message.chat.id, message.from_user.id
    user_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (user_id, chat_id), fetchone=True)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
        return
    if await handle_humiliation(message, user_data):
        return

    current_size = user_data.get("size", 0)

    if current_size >= PRESTIGE_REQUIREMENT:
        new_medals = user_data.get("medals", 0) + 1
        new_size = 5
        db_query(
            "UPDATE users SET size = ?, medals = medals + 1 WHERE user_id = ? AND chat_id = ?",
            (new_size, user_id, chat_id)
        )
        await message.answer(
            f"üèÖ <b>–ü–†–ï–°–¢–ò–ñ!</b> üèÖ\n\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –¥–æ—Å—Ç–∏–≥ {PRESTIGE_REQUIREMENT} —Å–º –∏ —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ–π —Ä–æ—Å—Ç —Ä–∞–¥–∏ –º–µ–¥–∞–ª–∏!\n"
            f"–¢–≤–æ–π —Ä–∞–∑–º–µ—Ä —Ç–µ–ø–µ—Ä—å: <b>{new_size} —Å–º</b>.\n"
            f"–í—Å–µ–≥–æ –º–µ–¥–∞–ª–µ–π: <b>{new_medals}</b>."
        )
    else:
        needed = PRESTIGE_REQUIREMENT - current_size
        await message.answer(
            f"–î–ª—è —Å–±—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∞–ª–∏ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å {PRESTIGE_REQUIREMENT} —Å–º.\n"
            f"–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ—â–µ {needed} —Å–º."
        )


@dp.message(Command("top"))
async def command_top_handler(message: types.Message):
    chat_id = message.chat.id
    sorted_users = db_query("SELECT * FROM users WHERE chat_id = ? ORDER BY size DESC LIMIT 15", (chat_id,),
                            fetchall=True)
    if not sorted_users: await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç."); return
    players = [user.get('nickname') or user.get('first_name', 'Unknown') for user in sorted_users]
    sizes = [user.get('size', 0) for user in sorted_users]
    plt.style.use('dark_background');
    fig, ax = plt.subplots()
    bars = ax.barh(players, sizes, color='#0088cc')
    ax.invert_yaxis();
    ax.set_xlabel('–†–∞–∑–º–µ—Ä (—Å–º)');
    ax.set_title('–¢–æ–ø –≤–æ–º–±–∞—Ç–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞')
    ax.bar_label(bars, fmt='%d —Å–º', label_type='edge', color='white', padding=5)
    fig.tight_layout();
    plt.savefig(CHART_FILE, dpi=200, bbox_inches='tight');
    plt.close(fig)
    chart = FSInputFile(CHART_FILE)
    await message.answer_photo(chart, caption="–í–æ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ üèÜ")
    if os.path.exists(CHART_FILE): os.remove(CHART_FILE)


@dp.message(Command("nickname"))
async def command_nickname_handler(message: types.Message, command: CommandObject):
    chat_id, user_id = message.chat.id, message.from_user.id
    user_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (user_id, chat_id), fetchone=True)
    if not user_data: await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"); return
    if await handle_humiliation(message, user_data): return
    new_nickname = command.args
    if new_nickname:
        if len(new_nickname) > 20: await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è!"); return
        db_query("UPDATE users SET nickname = ? WHERE user_id = ? AND chat_id = ?", (new_nickname, user_id, chat_id))
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–µ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∑–æ–≤—É—Ç: <b>{new_nickname}</b>")
    else:
        await message.answer("–ß—Ç–æ–±—ã –¥–∞—Ç—å –∏–º—è, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /nickname [–Ω–æ–≤–æ–µ –∏–º—è]")


@dp.message(Command("me"))
async def command_me_handler(message: types.Message):
    chat_id, user_id = message.chat.id, message.from_user.id
    user_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (user_id, chat_id), fetchone=True)
    if not user_data: await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"); return
    all_users = db_query("SELECT * FROM users WHERE chat_id = ? ORDER BY size DESC", (chat_id,), fetchall=True)
    rank = next((i + 1 for i, u in enumerate(all_users) if u['user_id'] == user_id), len(all_users))

    response = f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
    if user_data.get('nickname'): response += f"–ò–º—è –≤–æ–º–±–∞—Ç–∞: <b>{user_data['nickname']}</b>\n"

    medals = user_data.get('medals', 0)
    if medals > 0:
        response += f"–ú–µ–¥–∞–ª–∏ –ø—Ä–µ—Å—Ç–∏–∂–∞: {medals} üèÖ\n"

    response += f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {user_data.get('size', 0)} —Å–º\n"
    response += f"–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {rank} –∏–∑ {len(all_users)}\n"
    if user_data.get('status') == 'condemned': response += f"–°—Ç–∞—Ç—É—Å: <b>–û–°–£–ñ–î–ï–ù</b> üò°"
    await message.answer(response)


@dp.message(Command("duel"))
async def command_duel_handler(message: types.Message):
    chat_id, attacker_id = message.chat.id, message.from_user.id
    attacker_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (attacker_id, chat_id),
                             fetchone=True)
    if not attacker_data: await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"); return
    if await handle_humiliation(message, attacker_data): return
    chat_info = db_query("SELECT active_duel_json FROM chats WHERE chat_id = ?", (chat_id,), fetchone=True)
    if chat_info and chat_info.get("active_duel_json"): await message.answer(
        "–í —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å! –ü–æ–¥–æ–∂–¥–∏—Ç–µ."); return
    defender_id = await get_target_id_from_message(message, chat_id)
    if not defender_id: await message.answer("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–ø–æ–º—è–Ω–∏ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ @."); return
    if str(attacker_id) == defender_id: await message.answer("–ù–µ–ª—å–∑—è –¥—Ä–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π."); return
    defender_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (defender_id, chat_id),
                             fetchone=True)
    if not defender_data: await message.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –∏–≥—Ä–µ."); return
    attacker_name, defender_name = attacker_data.get('first_name'), defender_data.get('first_name')
    duel_data = {"attacker_id": attacker_id, "defender_id": int(defender_id),
                 "end_time": (datetime.now() + timedelta(seconds=DUEL_ACCEPT_TIMEOUT_SECONDS)).isoformat()}
    db_query(
        "INSERT INTO chats (chat_id, active_duel_json) VALUES (?, ?) ON CONFLICT(chat_id) DO UPDATE SET active_duel_json = excluded.active_duel_json",
        (chat_id, json.dumps(duel_data)))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"duel_accept"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"duel_decline")]])
    msg = await message.answer(
        f"‚öîÔ∏è <b>–í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!</b> ‚öîÔ∏è\n{attacker_name} –±—Ä–æ—Å–∞–µ—Ç –ø–µ—Ä—á–∞—Ç–∫—É –∏–≥—Ä–æ–∫—É {defender_name}!\n–ò—Å—Ö–æ–¥ —Ä–µ—à–∞–µ—Ç —É–¥–∞—á–∞ (50/50). –£ —Ç–µ–±—è –µ—Å—Ç—å {DUEL_ACCEPT_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤.",
        reply_markup=keyboard)
    duel_data['message_id'] = msg.message_id
    db_query("UPDATE chats SET active_duel_json = ? WHERE chat_id = ?", (json.dumps(duel_data), chat_id))


@dp.message(Command("casino"))
async def command_casino_handler(message: types.Message, command: CommandObject):
    chat_id, user_id = message.chat.id, message.from_user.id
    user_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (user_id, chat_id), fetchone=True)
    if not user_data: await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"); return
    if await handle_humiliation(message, user_data): return
    bet_str = command.args
    if not bet_str or not bet_str.isdigit(): await message.answer("–£–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É —á–∏—Å–ª–æ–º: /casino 10"); return
    bet = int(bet_str)
    current_size = user_data.get("size", 0)
    if bet <= 0: await message.answer("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è."); return
    if bet > current_size: await message.answer(
        f"–ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å! –¢–≤–æ–π —Ä–∞–∑–º–µ—Ä: {current_size} —Å–º."); return
    msg = await message.answer(f"<b>{user_data['first_name']}</b> —Å—Ç–∞–≤–∏—Ç {bet} —Å–º... üé≤")
    await asyncio.sleep(3)

    change = 0
    if random.choice([True, False]):
        change = bet
        db_query("UPDATE users SET size = size + ? WHERE user_id = ? AND chat_id = ?", (change, user_id, chat_id))
        final_size = current_size + change
        await msg.edit_text(f"üéâ <b>–í–´–ò–ì–†–´–®!</b> üéâ\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª {bet} —Å–º! –¢–≤–æ–π –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {final_size} —Å–º.")
    else:
        change = -bet
        db_query("UPDATE users SET size = size + ? WHERE user_id = ? AND chat_id = ?", (change, user_id, chat_id))
        final_size = current_size + change
        await msg.edit_text(f"üò• <b>–ü–†–û–ò–ì–†–´–®...</b> üò•\n–¢—ã –ø–æ—Ç–µ—Ä—è–ª {bet} —Å–º! –¢–≤–æ–π –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {final_size} —Å–º.")
    # --------------------------------------------------------------------------


@dp.message(Command("tag"))
async def command_tag_handler(message: types.Message):
    chat_id = message.chat.id
    chat_info = db_query("SELECT last_tag_time FROM chats WHERE chat_id = ?", (chat_id,), fetchone=True) or {}
    last_tag_str = chat_info.get("last_tag_time")
    if last_tag_str:
        last_tag_time = datetime.fromisoformat(last_tag_str)
        if datetime.now() < last_tag_time + timedelta(seconds=TAG_COOLDOWN_SECONDS):
            await message.answer(f"–û–±—â–∏–π —Å–±–æ—Ä –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—ä—è–≤–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            return
    all_users = db_query("SELECT user_id, first_name FROM users WHERE chat_id = ?", (chat_id,), fetchall=True)
    if not all_users: await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞."); return
    mentions = [f"<a href='tg://user?id={user['user_id']}'>{user.get('first_name', 'Player')}</a>" for user in
                all_users]
    await message.answer(f"üì¢ <b>–û–ë–©–ò–ô –°–ë–û–†!</b> üì¢\n{', '.join(mentions)}")
    db_query(
        "INSERT INTO chats (chat_id, last_tag_time) VALUES (?, ?) ON CONFLICT(chat_id) DO UPDATE SET last_tag_time = excluded.last_tag_time",
        (chat_id, datetime.now().isoformat()))


@dp.message(Command("trial"))
async def command_trial_handler(message: types.Message):
    chat_id, prosecutor_id = message.chat.id, message.from_user.id
    prosecutor_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (prosecutor_id, chat_id),
                               fetchone=True)
    if not prosecutor_data: await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start"); return
    if await handle_humiliation(message, prosecutor_data): return
    chat_info = db_query("SELECT active_trial_json FROM chats WHERE chat_id = ?", (chat_id,), fetchone=True) or {}
    if chat_info.get("active_trial_json"): await message.answer("–í —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç —Å—É–¥!"); return
    defendant_id = await get_target_id_from_message(message, chat_id)
    if not defendant_id: await message.answer("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
    if str(prosecutor_id) == defendant_id: await message.answer("–ù–µ–ª—å–∑—è —Å—É–¥–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è."); return
    defendant_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (defendant_id, chat_id),
                              fetchone=True)
    if not defendant_data: await message.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤ –∏–≥—Ä–µ"); return
    prosecutor_name, defendant_name = prosecutor_data['first_name'], defendant_data['first_name']
    trial_data = {"prosecutor_id": prosecutor_id, "defendant_id": int(defendant_id),
                  "end_time": (datetime.now() + timedelta(minutes=5)).isoformat(),
                  "votes": {"guilty": [], "innocent": []}}
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í–∏–Ω–æ–≤–µ–Ω", callback_data="vote_guilty"),
                                                      InlineKeyboardButton(text="–ù–µ–≤–∏–Ω–æ–≤–µ–Ω",
                                                                           callback_data="vote_innocent")]])
    msg = await message.answer(
        f"‚öñÔ∏è <b>–°–£–î!</b> ‚öñÔ∏è\n{prosecutor_name} –æ–±–≤–∏–Ω—è–µ—Ç {defendant_name}!\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç.",
        reply_markup=keyboard)
    trial_data['message_id'] = msg.message_id
    db_query(
        "INSERT INTO chats (chat_id, active_trial_json) VALUES (?, ?) ON CONFLICT(chat_id) DO UPDATE SET active_trial_json = excluded.active_trial_json",
        (chat_id, json.dumps(trial_data)))


@dp.message(Command("execute"))
async def command_execute_handler(message: types.Message):
    chat_id, executioner_id = message.chat.id, message.from_user.id
    target_id = await get_target_id_from_message(message, chat_id)
    if not target_id: await message.answer("–¶–µ–ª—å –¥–ª—è –∫–∞–∑–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
    target_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (target_id, chat_id), fetchone=True)
    executioner_data = db_query("SELECT first_name FROM users WHERE user_id = ? AND chat_id = ?",
                                (executioner_id, chat_id), fetchone=True)
    if not target_data or not executioner_data: return
    if target_data.get("status") == "condemned" and str(target_data.get("condemned_by")) == str(executioner_id):
        db_query(
            "UPDATE users SET size_before_execution = size, size = 0, status = 'executed', executed_at = ?, condemned_by = NULL, punishment_end_time = NULL WHERE user_id = ? AND chat_id = ?",
            (datetime.now().isoformat(), target_id, chat_id))
        await message.answer(
            f"‚ò†Ô∏è <b>–ü–†–ò–ì–û–í–û–† –ò–°–ü–û–õ–ù–ï–ù!</b>\n{executioner_data['first_name']} –∫–∞–∑–Ω–∏–ª {target_data['first_name']}. –ï–≥–æ –≤–æ–º–±–∞—Ç –æ–±–Ω—É–ª–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –∫–∞–∑–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")


@dp.message(Command("pardon"))
async def command_pardon_handler(message: types.Message):
    chat_id = message.chat.id
    target_id = await get_target_id_from_message(message, chat_id)
    if not target_id: await message.answer("–¶–µ–ª—å –¥–ª—è –ø–æ–º–∏–ª–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return
    target_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (target_id, chat_id), fetchone=True)
    if not target_data: return
    if target_data.get("status") == "executed" and target_data.get("executed_at"):
        executed_at = datetime.fromisoformat(target_data["executed_at"])
        if datetime.now() < executed_at + timedelta(minutes=30):
            db_query("UPDATE users SET size = ?, status = 'normal' WHERE user_id = ? AND chat_id = ?",
                     (target_data['size_before_execution'], target_id, chat_id))
            await message.answer(
                f"‚ù§Ô∏è <b>–ú–ò–õ–û–°–ï–†–î–ò–ï!</b>\n{target_data['first_name']} –±—ã–ª –ø–æ–º–∏–ª–æ–≤–∞–Ω. –ï–≥–æ –≤–æ–º–±–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            await message.answer("–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ –¥–ª—è –º–∏–ª–æ—Å–µ—Ä–¥–∏—è.")


@dp.callback_query(F.data.startswith("vote_"))
async def process_vote_callback(callback: types.CallbackQuery):
    chat_id, user_id = callback.message.chat.id, callback.from_user.id
    chat_info = db_query("SELECT active_trial_json FROM chats WHERE chat_id = ?", (chat_id,), fetchone=True)
    if not chat_info or not chat_info['active_trial_json']: await callback.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                                                                                  show_alert=True); return
    trial = json.loads(chat_info['active_trial_json'])
    if str(user_id) in [str(trial["prosecutor_id"]), str(trial["defendant_id"])]: await callback.answer(
        "–û–±–≤–∏–Ω–∏—Ç–µ–ª—å –∏ –æ–±–≤–∏–Ω—è–µ–º—ã–π –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç.", show_alert=True); return
    if any(user_id in v for v in trial["votes"].values()): await callback.answer("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.",
                                                                                 show_alert=True); return
    vote = callback.data.split("_")[1]
    trial["votes"][vote].append(user_id)
    db_query("UPDATE chats SET active_trial_json = ? WHERE chat_id = ?", (json.dumps(trial), chat_id))
    await callback.answer(f"–í–∞—à –≥–æ–ª–æ—Å '{vote}' –ø—Ä–∏–Ω—è—Ç!")
    guilty_count, innocent_count = len(trial["votes"]["guilty"]), len(trial["votes"]["innocent"])
    defendant = db_query("SELECT first_name FROM users WHERE user_id = ? AND chat_id = ?",
                         (trial['defendant_id'], chat_id), fetchone=True)
    prosecutor = db_query("SELECT first_name FROM users WHERE user_id = ? AND chat_id = ?",
                          (trial['prosecutor_id'], chat_id), fetchone=True)
    await bot.edit_message_text(
        f"‚öñÔ∏è <b>–°–£–î!</b> ‚öñÔ∏è\n{prosecutor['first_name']} –æ–±–≤–∏–Ω—è–µ—Ç {defendant['first_name']}!\n–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç.\n\n<b>–ì–æ–ª–æ—Å–∞ '–í–∏–Ω–æ–≤–µ–Ω': {guilty_count} | '–ù–µ–≤–∏–Ω–æ–≤–µ–Ω': {innocent_count}</b>",
        chat_id, trial["message_id"], reply_markup=callback.message.reply_markup)


@dp.callback_query(F.data.startswith("set_term:"))
async def set_term_callback(callback: types.CallbackQuery):
    chat_id, prosecutor_id = callback.message.chat.id, callback.from_user.id
    _, defendant_id, hours = callback.data.split(":")
    defendant_data = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (defendant_id, chat_id),
                              fetchone=True)
    if not defendant_data or str(prosecutor_id) != str(defendant_data.get("condemned_by")): await callback.answer(
        "–¢–æ–ª—å–∫–æ –æ–±–≤–∏–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ä–æ–∫.", show_alert=True); return
    end_time = (datetime.now() + timedelta(hours=int(hours))).isoformat()
    db_query("UPDATE users SET punishment_end_time = ? WHERE user_id = ? AND chat_id = ?",
             (end_time, defendant_id, chat_id))
    days, hours_rem = divmod(int(hours), 24)
    await callback.message.edit_text(
        f"–ü—Ä–∏–≥–æ–≤–æ—Ä –≤—ã–Ω–µ—Å–µ–Ω! {defendant_data['first_name']} –æ—Å—É–∂–¥–µ–Ω –Ω–∞ {days} –¥. {hours_rem} —á.\n–û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∑–Ω–µ–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞.")


@dp.callback_query(F.data.startswith("duel_"))
async def process_duel_callback(callback: types.CallbackQuery):
    chat_id, user_id = callback.message.chat.id, callback.from_user.id
    chat_info = db_query("SELECT active_duel_json FROM chats WHERE chat_id = ?", (chat_id,), fetchone=True)
    if not chat_info or not chat_info['active_duel_json']: await callback.message.edit_text(
        "–≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."); return
    duel_data = json.loads(chat_info['active_duel_json'])
    if user_id != duel_data["defender_id"]: await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –≤—ã–∑–æ–≤!", show_alert=True); return
    action = callback.data.split("_")[1]
    attacker_id, defender_id = duel_data["attacker_id"], duel_data["defender_id"]
    attacker = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (attacker_id, chat_id), fetchone=True)
    defender = db_query("SELECT * FROM users WHERE user_id = ? AND chat_id = ?", (defender_id, chat_id), fetchone=True)
    if action == "decline":
        await callback.message.edit_text(
            f"{defender['first_name']} —Ç—Ä—É—Å–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥—É—ç–ª–∏ —Å {attacker['first_name']}.")
    elif action == "accept":
        await callback.message.edit_text(f"{defender['first_name']} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–∑–æ–≤! –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
        await asyncio.sleep(2)
        if random.choice([True, False]):
            winner, loser, winner_name, loser_name = attacker, defender, attacker['first_name'], defender['first_name']
        else:
            winner, loser, winner_name, loser_name = defender, attacker, defender['first_name'], attacker['first_name']
        stolen_size = random.randint(1, 5)
        final_loser_size = max(0, loser['size'] - stolen_size)
        stolen_size = loser['size'] - final_loser_size
        db_query("UPDATE users SET size = size + ? WHERE user_id = ? AND chat_id = ?",
                 (stolen_size, winner['user_id'], chat_id))
        db_query("UPDATE users SET size = ? WHERE user_id = ? AND chat_id = ?",
                 (final_loser_size, loser['user_id'], chat_id))
        await callback.message.edit_text(
            f"üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}!</b>\n–í —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ö–≤–∞—Ç–∫–µ —É–¥–∞—á–∞ –±—ã–ª–∞ –Ω–∞ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω–µ. –û–Ω –æ—Ç–±–∏—Ä–∞–µ—Ç —É {loser_name} —Ü–µ–ª—ã—Ö {stolen_size} —Å–º!")
    db_query("UPDATE chats SET active_duel_json = NULL WHERE chat_id = ?", (chat_id,))


# A background task to check for finished events.
async def background_tasks():
    while True:
        await asyncio.sleep(20)
        now = datetime.now()
        all_chats = db_query("SELECT * FROM chats", fetchall=True)
        for chat in all_chats:
            chat_id = chat['chat_id']
            if chat['active_duel_json']:
                duel = json.loads(chat['active_duel_json'])
                if now > datetime.fromisoformat(duel["end_time"]):
                    try:
                        await bot.edit_message_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω.", chat_id, duel["message_id"])
                    except Exception:
                        pass
                    db_query("UPDATE chats SET active_duel_json = NULL WHERE chat_id = ?", (chat_id,))
            if chat['active_trial_json']:
                trial = json.loads(chat['active_trial_json'])
                if now > datetime.fromisoformat(trial["end_time"]):
                    prosecutor_id, defendant_id = trial["prosecutor_id"], trial["defendant_id"]
                    prosecutor = db_query("SELECT * FROM users WHERE user_id=? AND chat_id=?", (prosecutor_id, chat_id),
                                          fetchone=True)
                    defendant = db_query("SELECT * FROM users WHERE user_id=? AND chat_id=?", (defendant_id, chat_id),
                                         fetchone=True)
                    guilty_count, innocent_count = len(trial["votes"]["guilty"]), len(trial["votes"]["innocent"])
                    if guilty_count > innocent_count and (guilty_count + innocent_count) >= 1:
                        db_query("UPDATE users SET status='condemned', condemned_by=? WHERE user_id=? AND chat_id=?",
                                 (prosecutor_id, defendant_id, chat_id))
                        await bot.delete_message(chat_id, trial["message_id"])
                        term_kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="1 —á–∞—Å", callback_data=f"set_term:{defendant_id}:1"),
                             InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data=f"set_term:{defendant_id}:24")],
                            [InlineKeyboardButton(text="3 –¥–Ω—è", callback_data=f"set_term:{defendant_id}:72"),
                             InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data=f"set_term:{defendant_id}:168")]])
                        await bot.send_message(chat_id,
                                               f"<b>–í–ï–†–î–ò–ö–¢: –í–ò–ù–û–í–ï–ù!</b>\n{prosecutor['first_name']}, –≤—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {defendant['first_name']}.",
                                               reply_markup=term_kb)
                    else:
                        await bot.delete_message(chat_id, trial["message_id"])
                        await bot.send_message(chat_id,
                                               f"<b>–í–ï–†–î–ò–ö–¢: –ù–ï–í–ò–ù–û–í–ï–ù!</b>\n{defendant['first_name']} –æ–ø—Ä–∞–≤–¥–∞–Ω. –®—Ç—Ä–∞—Ñ –æ–±–≤–∏–Ω–∏—Ç–µ–ª—é ({prosecutor['first_name']}): -2 —Å–º.")
                        db_query("UPDATE users SET size=max(0, size - 2) WHERE user_id=? AND chat_id=?",
                                 (prosecutor_id, chat_id))
                    db_query("UPDATE chats SET active_trial_json = NULL WHERE chat_id = ?", (chat_id,))
        condemned_users = db_query("SELECT * FROM users WHERE status = 'condemned' AND punishment_end_time IS NOT NULL",
                                   fetchall=True)
        for user in condemned_users:
            if now > datetime.fromisoformat(user["punishment_end_time"]):
                db_query(
                    "UPDATE users SET status='normal', condemned_by=NULL, punishment_end_time=NULL WHERE user_id=? AND chat_id=?",
                    (user['user_id'], user['chat_id']))
                await bot.send_message(user['chat_id'],
                                       f"–í—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {user['first_name']} –∏—Å—Ç–µ–∫–ª–æ. –û–Ω —Å–Ω–æ–≤–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–µ.")


async def main() -> None:
    init_db()
    asyncio.create_task(background_tasks())
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())